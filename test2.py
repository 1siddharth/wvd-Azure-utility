"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging

import requests
import msal
client_id = "f1da8793-4dfc-4efd-a26d-c303e9302747"
authorityurl = "https://login.microsoftonline.com/xoft2hotmail.onmicrosoft.com"
secret="vz-rCHsiwoH~ChZE6u.2Bf~hGe15.n8uQH"
scope= ["https://graph.microsoft.com/.default"]
endpoint = "https://graph.microsoft.com/v1.0/users"
# Optional logging
# logging.basicConfig(level=logging.DEBUG)


# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
   client_id, authority=authorityurl,
    client_credential=secret,
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(scope, account=None)

body ={
            "accountEnabled":True ,
            "displayName":"apptest34",
            "mailNickname":"hello-world",
            "passwordProfile":{
    "forceChangePasswordNextSignIn": False,
    "password": "Colors123321#",
  }
            ,
            "userPrincipalName":"xoft23@xoft2hotmail.onmicrosoft.com",
        }

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=scope)

if "access_token" in result:
    # Calling graph using the access token
    graph_data = requests.post(  # Use token to call downstream service
        endpoint,
        headers={'Authorization': 'Bearer ' + result['access_token'],
        
        "Content-Type":"application/json",} , json =body
         ).json() 

    print(graph_data)
else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug
